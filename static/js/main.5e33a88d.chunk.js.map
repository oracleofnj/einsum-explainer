{"version":3,"sources":["pkg/einsum.js","types/einsum_typeguards.ts","utils/parseAndTypecheckJSON.ts","appstate/ducks/updateEquation.ts","utils/parseShapeStrings.ts","utils/parseOutputString.ts","appstate/ducks/updateShape.ts","utils/parseDataString.ts","appstate/ducks/updateContents.ts","appstate/ducks/addShape.ts","utils/range.ts","appstate/appState.ts","appstate/makeReducer.ts","components/EquationInput.tsx","utils/makeLatexString.ts","components/EquationOutput.tsx","components/Equation.tsx","components/AxisLengthsOutput.tsx","components/ShapesInput.tsx","components/Shapes.tsx","components/ComputationOutput.tsx","components/ContentsInput.tsx","components/Computation.tsx","components/EinsumExplainer.tsx","utils/serviceWorker.js","index.js"],"names":["wasm","passStringToWasm","__exports","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","cachegetUint8Memory","getUint8Memory","buffer","memory","Uint8Array","encodeInto","arg","size","length","ptr","__wbindgen_malloc","writeOffset","view","subarray","_cachedTextEncoder$en","read","written","substring","__wbindgen_realloc","buf","encode","set","cachedTextDecoder","TextDecoder","getStringFromWasm","len","decode","cachedGlobalArgumentPtr","globalArgumentPtr","__wbindgen_global_argument_ptr","cachegetUint32Memory","getUint32Memory","Uint32Array","validateAsJson","input_string","ptr0","len0","retptr","mem","rustptr","rustlen","realRet","slice","__wbindgen_free","validateAndSizeFromShapesAsStringAsJson","operand_shapes","ptr1","len1","slowEinsumAsJson","flattened_operands_as_string","heap","Array","fill","undefined","push","heap_next","__wbindgen_object_drop_ref","i","idx","init","module","result","imports","./einsum","URL","Request","response","fetch","WebAssembly","instantiateStreaming","catch","e","console","warn","then","r","arrayBuffer","bytes","instantiate","Instance","instance","_ref","exports","__wbindgen_wasm_module","isErrorMessage","hasOwnProperty","isNumberArray","every","x","getShape","arr","Ok","innerShape","_loop","nextShape","v","val","ix","Err","_ret","concat","Object","toConsumableArray","isNDArray","isProbablyNDArray","first","isContraction","operand_indices","isSizedContraction","contraction","entries","_ref2","slicedToArray","isOutputSize","output_size","isFlattenedOperand","shape","contents","parseAndTypecheckJSON","str","typeguard","problematicFunctionName","obj","JSON","parse","_unused","err","isOk","enforce","action","type","equation","updateEquation","actionCreator","reducer","state","visibleSizes","einsumExplanation","objectSpread","TypeError","stringify","parseShapeString","shapeString","bracketedShapeString","replace","parseOutput","output","unflatten","stride","UPDATE_SHAPE","index","updateShape","data","operandShapes","newContents","operandVectors","totalLength","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","return","ret","getContents","newNDArray","operandContents","parseDataString","dataString","bracketedDataString","UPDATE_CONTENTS","updateContents","Error","flat","Math","pow","addShape","range","start","stop","step","arguments","initialState","appActions","addShapeDuck","updateEquationDuck","updateShapeDuck","updateContentsDuck","ducks","appReducers","forEach","duck","makeReducer","React","memo","dispatch","react_default","a","createElement","onChange","target","makeLatexString","outputMatrix","output_indices","join","summationSymbols","summation_indices","map","inputMatrices","indices","n","asciiA","charCodeAt","matrixName","String","fromCharCode","subscripts","split","EquationOutput","props","contractionErrorMessage","dangerousKatexHTML","explanation","explanationJSON","latexString","__html","renderToString","Fragment","dangerouslySetInnerHTML","equationJSON","components_EquationInput","components_EquationOutput","AxisLengthsOutput","sizeErrorMessage","outputSize","sizedExplanationJSON","sizedExplanation","outputMap","key","shapes","makeOnShapeChange","shapeArrays","some","filter","components_ShapesInput","components_AxisLengthsOutput","ComputationOutput","errorMessage","outputStr","computationOutput","computationOutputJSON","makeOnContentsChange","operands","min","components_ContentsInput","components_ComputationOutput","EinsumExplainer","_useReducer","useReducer","_useReducer2","appState","className","components_Equation","components_Shapes","components_Computation","Boolean","window","location","hostname","match","_run","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","ReactDOM","render","components_EinsumExplainer","document","getElementById","apply","this","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e33a88d.chunk.js","sourcesContent":["\nconst __exports = {};\nlet wasm;\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let writeOffset = 0;\n        while (true) {\n            const view = getUint8Memory().subarray(ptr + writeOffset, ptr + size);\n            const { read, written } = cachedTextEncoder.encodeInto(arg, view);\n            writeOffset += written;\n            if (read === arg.length) {\n                break;\n            }\n            arg = arg.substring(read);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size += arg.length * 3);\n        }\n        WASM_VECTOR_LEN = writeOffset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = wasm.__wbindgen_malloc(buf.length);\n        getUint8Memory().set(buf, ptr);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    };\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* @param {string} input_string\n* @returns {string}\n*/\nexport function validateAsJson(input_string) {\n    const ptr0 = passStringToWasm(input_string);\n    const len0 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.validateAsJson(retptr, ptr0, len0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n\n    }\n\n}\n\n__exports.validateAsJson = validateAsJson;\n\n/**\n* @param {string} input_string\n* @param {string} operand_shapes\n* @returns {string}\n*/\nexport function validateAndSizeFromShapesAsStringAsJson(input_string, operand_shapes) {\n    const ptr0 = passStringToWasm(input_string);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm(operand_shapes);\n    const len1 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.validateAndSizeFromShapesAsStringAsJson(retptr, ptr0, len0, ptr1, len1);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n\n__exports.validateAndSizeFromShapesAsStringAsJson = validateAndSizeFromShapesAsStringAsJson;\n\n/**\n* @param {string} input_string\n* @param {string} flattened_operands_as_string\n* @returns {string}\n*/\nexport function slowEinsumAsJson(input_string, flattened_operands_as_string) {\n    const ptr0 = passStringToWasm(input_string);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm(flattened_operands_as_string);\n    const len1 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.slowEinsumAsJson(retptr, ptr0, len0, ptr1, len1);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n\n__exports.slowEinsumAsJson = slowEinsumAsJson;\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction __wbindgen_object_drop_ref(i) { dropObject(i); }\n\n__exports.__wbindgen_object_drop_ref = __wbindgen_object_drop_ref;\n\nfunction init(module) {\n    let result;\n    const imports = { './einsum': __exports };\n    if (module instanceof URL || typeof module === 'string' || module instanceof Request) {\n\n        const response = fetch(module);\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            result = WebAssembly.instantiateStreaming(response, imports)\n            .catch(e => {\n                console.warn(\"`WebAssembly.instantiateStreaming` failed. Assuming this is because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                return response\n                .then(r => r.arrayBuffer())\n                .then(bytes => WebAssembly.instantiate(bytes, imports));\n            });\n        } else {\n            result = response\n            .then(r => r.arrayBuffer())\n            .then(bytes => WebAssembly.instantiate(bytes, imports));\n        }\n    } else {\n\n        result = WebAssembly.instantiate(module, imports)\n        .then(result => {\n            if (result instanceof WebAssembly.Instance) {\n                return { instance: result, module };\n            } else {\n                return result;\n            }\n        });\n    }\n    return result.then(({instance, module}) => {\n        wasm = instance.exports;\n        init.__wbindgen_wasm_module = module;\n\n        return wasm;\n    });\n}\n\nexport default init;\n\n","export type ErrorMessage = {\n  Err: string;\n};\n\nexport function isErrorMessage(r: any): r is ErrorMessage {\n  return (r as object).hasOwnProperty(\"Err\");\n}\n\nexport type Result<T> = { Ok: T } | ErrorMessage;\n\nexport function isOk<T>(r: any, typeguard: (obj: any) => obj is T): r is Result<T> {\n  return (r as object).hasOwnProperty(\"Ok\") && typeguard((r as { Ok: T }).Ok);\n}\n\nexport function enforce<T>(\n  obj: any,\n  typeguard: (obj: any) => obj is T,\n  err: ErrorMessage\n): Result<T> {\n  if (isOk(obj, typeguard)) {\n    return obj;\n  } else if (isErrorMessage(obj)) {\n    return obj;\n  } else {\n    return err;\n  }\n}\n\nexport function isNumberArray(r: any): r is number[] {\n  return r instanceof Array && r.every(x => typeof x === \"number\");\n}\n\nexport type NDArray = number | NDArrayArray;\n\ninterface NDArrayArray extends Array<NDArray> {}\n\nfunction isProbablyNDArray(r: any): r is NDArray {\n  if (typeof r === \"number\") {\n    return true;\n  }\n  if (!(r instanceof Array)) {\n    return false;\n  }\n  if (isNumberArray(r) && r.length !== 0) {\n    return true;\n  }\n  const first = r[0];\n  if (!(first instanceof Array) || first.length === 0) {\n    return false;\n  }\n  const len = first.length;\n  return (\n    len !== 0 && r.every(x => x instanceof Array && x.length === len && isProbablyNDArray(x))\n  );\n}\n\nexport function getShape(arr: NDArray): Result<number[]> {\n  if (typeof arr === \"number\") {\n    return { Ok: [] };\n  }\n  const innerShape = getShape(arr[0]);\n  if (isErrorMessage(innerShape)) {\n    return innerShape;\n  }\n  for (let i = 1; i < arr.length; i++) {\n    const nextShape = getShape(arr[i]);\n    if (isErrorMessage(nextShape)) {\n      return nextShape;\n    }\n    if (!innerShape.Ok.every((val, ix) => nextShape.Ok[ix] === val)) {\n      return {\n        Err: \"Array contains elements with different shapes\"\n      };\n    }\n  }\n  return { Ok: [arr.length, ...innerShape.Ok] };\n}\n\nexport function isNDArray(r: any): r is NDArray {\n  if (!isProbablyNDArray(r)) {\n    return false;\n  }\n  const shape = getShape(r);\n  return !isErrorMessage(shape);\n}\n\nexport type Contraction = {\n  operand_indices: string[];\n  output_indices: string[];\n  summation_indices: string[];\n};\n\nexport function isContraction(r: object): r is Contraction {\n  return (\n    r.hasOwnProperty(\"operand_indices\") &&\n    (r as Contraction).operand_indices instanceof Array &&\n    r.hasOwnProperty(\"output_indices\") &&\n    r.hasOwnProperty(\"summation_indices\")\n  );\n}\n\nexport type OutputSize = { [key: string]: number };\n\nexport function isOutputSize(r: any): r is OutputSize {\n  return Object.entries(r as object).every(([_, val]) => typeof val === \"number\");\n}\n\nexport type SizedContraction = {\n  contraction: Contraction;\n  output_size: OutputSize;\n};\n\nexport function isSizedContraction(r: object): r is SizedContraction {\n  return (\n    r.hasOwnProperty(\"contraction\") &&\n    isContraction((r as SizedContraction).contraction) &&\n    r.hasOwnProperty(\"output_size\") &&\n    isOutputSize((r as SizedContraction).output_size)\n  );\n}\n\nexport type FlattenedOperand = {\n  shape: number[];\n  contents: number[];\n};\n\nexport function isFlattenedOperand(r: object): r is FlattenedOperand {\n  return (\n    r.hasOwnProperty(\"shape\") &&\n    isNumberArray((r as FlattenedOperand).shape) &&\n    r.hasOwnProperty(\"contents\") &&\n    isNumberArray((r as FlattenedOperand).contents)\n  );\n}\n","import { Result, enforce } from \"../types/einsum_typeguards\";\n\nexport default function parseAndTypecheckJSON<T>(\n  str: string,\n  typeguard: (r: any) => r is T,\n  problematicFunctionName: string\n): Result<T> {\n  let obj;\n  try {\n    obj = JSON.parse(str);\n  } catch {\n    return {\n      Err: `${problematicFunctionName} returned invalid JSON`\n    };\n  }\n  return enforce(obj, typeguard, {\n    Err: `${problematicFunctionName} returned valid JSON but of the wrong type`\n  });\n}\n","import { validateAsJson } from \"../../pkg/einsum\";\nimport { isContraction, isErrorMessage } from \"../../types/einsum_typeguards\";\nimport { AppState, AppAction } from \"../appState\";\nimport { AnyAction } from \"../makeReducer\";\nimport parseAndTypecheckJSON from \"../../utils/parseAndTypecheckJSON\";\n\nconst UPDATE_EQUATION = \"updateEquation\";\n\nexport interface UpdateEquationAction extends AnyAction {\n  equation: string;\n}\n\nconst typeguard = (action: AppAction): action is UpdateEquationAction =>\n  action.type === UPDATE_EQUATION &&\n  action.hasOwnProperty(\"equation\") &&\n  typeof (action as UpdateEquationAction).equation === \"string\";\n\nconst actionCreator = (equation: string): UpdateEquationAction => ({\n  type: UPDATE_EQUATION,\n  equation\n});\n\nconst reducer = (state: AppState, action: AppAction): AppState => {\n  if (typeguard(action)) {\n    const { equation } = action;\n    let { visibleSizes } = state;\n\n    const einsumExplanation = parseAndTypecheckJSON(\n      validateAsJson(equation),\n      isContraction,\n      \"validateAsJson\"\n    );\n    if (!isErrorMessage(einsumExplanation)) {\n      visibleSizes = einsumExplanation.Ok.operand_indices.length;\n    }\n\n    return {\n      ...state,\n      visibleSizes,\n      equation: (action as UpdateEquationAction).equation\n    };\n  } else {\n    throw new TypeError(JSON.stringify({ action }));\n  }\n};\n\nexport default {\n  type: UPDATE_EQUATION,\n  typeguard,\n  actionCreator,\n  reducer\n};\n","import { Result, isNumberArray } from \"../types/einsum_typeguards\";\n\nfunction parseShapeString(shapeString: string): Result<number[]> {\n  const bracketedShapeString = shapeString.replace(/\\(/g, \"[\").replace(/\\)/g, \"]\");\n  let obj;\n  try {\n    obj = JSON.parse(bracketedShapeString);\n  } catch {\n    return {\n      Err: \"Not a valid shape\"\n    };\n  }\n  return isNumberArray(obj) ? { Ok: obj } : { Err: \"Not a valid shape\" };\n}\n\nexport { parseShapeString };\n","import { FlattenedOperand, NDArray } from \"../types/einsum_typeguards\";\n\nfunction unflatten(shape: number[], contents: number[]): NDArray {\n  switch (shape.length) {\n    case 0:\n      return contents[0];\n    case 1:\n      return contents.slice();\n    default:\n      const result: NDArray = [];\n      let stride = 1;\n      for (let i = 1; i < shape.length; i++) {\n        stride *= shape[i];\n      }\n      for (let i = 0; i < shape[0]; i++) {\n        result.push(unflatten(shape.slice(1), contents.slice(i * stride, (i + 1) * stride)));\n      }\n      return result;\n  }\n}\n\nexport default function parseOutput(output: FlattenedOperand): NDArray {\n  const { shape, contents } = output;\n  return unflatten(shape, contents);\n}\n","import { AppState, AppAction } from \"../appState\";\nimport { AnyAction } from \"../makeReducer\";\nimport { parseShapeString } from \"../../utils/parseShapeStrings\";\nimport { isErrorMessage } from \"../../types/einsum_typeguards\";\nimport parseOutput from \"../../utils/parseOutputString\";\n\nexport interface UpdateShapeAction extends AnyAction {\n  index: number;\n  shape: string;\n}\n\nconst UPDATE_SHAPE = \"updateShape\";\nfunction typeguard(action: AppAction): action is UpdateShapeAction {\n  return (\n    action.type === UPDATE_SHAPE &&\n    action.hasOwnProperty(\"index\") &&\n    typeof (action as UpdateShapeAction).index === \"number\" &&\n    action.hasOwnProperty(\"shape\") &&\n    typeof (action as UpdateShapeAction).shape === \"string\"\n  );\n}\n\nfunction actionCreator(index: number, shape: string): UpdateShapeAction {\n  return {\n    type: UPDATE_SHAPE,\n    index,\n    shape\n  };\n}\n\nfunction getContents(operandVectors: number[][], index: number, shape: number[]) {\n  let totalLength = 1;\n  for (const s of shape) {\n    totalLength *= s;\n  }\n  const v = operandVectors[index];\n  if (!(v instanceof Array)) {\n    return Array(totalLength).fill(0);\n  }\n  const ret = [];\n  for (let i = 0; i < totalLength; i++) {\n    if (typeof v[i] !== \"number\") {\n      ret.push(0);\n    } else {\n      ret.push(v[i]);\n    }\n  }\n  return ret;\n}\n\nfunction reducer(state: AppState, action: AppAction): AppState {\n  if (typeguard(action)) {\n    const { index, shape } = action;\n    const data = parseShapeString(shape);\n    if (isErrorMessage(data)) {\n      return {\n        ...state,\n        operandShapes: [\n          ...state.operandShapes.slice(0, index),\n          shape,\n          ...state.operandShapes.slice(index + 1)\n        ]\n      };\n    } else {\n      const newContents = getContents(state.operandVectors, index, data.Ok);\n      const newNDArray = parseOutput({\n        shape: data.Ok,\n        contents: newContents\n      });\n\n      return {\n        ...state,\n        operandContents: [\n          ...state.operandContents.slice(0, index),\n          JSON.stringify(newNDArray),\n          ...state.operandContents.slice(index + 1)\n        ],\n        operandShapes: [\n          ...state.operandShapes.slice(0, index),\n          shape,\n          ...state.operandShapes.slice(index + 1)\n        ]\n      };\n    }\n  } else {\n    throw new TypeError(JSON.stringify({ reducer: UPDATE_SHAPE, action }));\n  }\n}\n\nexport default {\n  type: UPDATE_SHAPE,\n  typeguard,\n  actionCreator,\n  reducer\n};\n","import { Result, isNDArray, NDArray } from \"../types/einsum_typeguards\";\n\nfunction parseDataString(dataString: string): Result<NDArray> {\n  const bracketedDataString = dataString.replace(/\\(/g, \"[\").replace(/\\)/g, \"]\");\n  let obj;\n  try {\n    obj = JSON.parse(bracketedDataString);\n  } catch {\n    return {\n      Err: \"Not a valid ndArray\"\n    };\n  }\n  return isNDArray(obj) ? { Ok: obj } : { Err: \"Not a valid ndArray\" };\n}\n\nexport { parseDataString };\n","import { AppState, AppAction } from \"../appState\";\nimport { AnyAction } from \"../makeReducer\";\nimport { parseDataString } from \"../../utils/parseDataString\";\nimport { isErrorMessage, getShape } from \"../../types/einsum_typeguards\";\n\nexport interface UpdateContentsAction extends AnyAction {\n  index: number;\n  contents: string;\n}\n\nconst UPDATE_CONTENTS = \"updateContents\";\nfunction typeguard(action: AppAction): action is UpdateContentsAction {\n  return (\n    action.type === UPDATE_CONTENTS &&\n    action.hasOwnProperty(\"index\") &&\n    typeof (action as UpdateContentsAction).index === \"number\" &&\n    action.hasOwnProperty(\"contents\") &&\n    typeof (action as UpdateContentsAction).contents === \"string\"\n  );\n}\n\nfunction actionCreator(index: number, contents: string): UpdateContentsAction {\n  return {\n    type: UPDATE_CONTENTS,\n    index,\n    contents\n  };\n}\n\nfunction reducer(state: AppState, action: AppAction): AppState {\n  if (typeguard(action)) {\n    const { index, contents } = action;\n    const data = parseDataString(contents);\n    if (isErrorMessage(data)) {\n      return {\n        ...state,\n        operandContents: [\n          ...state.operandContents.slice(0, index),\n          contents,\n          ...state.operandContents.slice(index + 1)\n        ]\n      };\n    } else {\n      const shape = getShape(data.Ok);\n      if (isErrorMessage(shape)) {\n        throw new Error(\"This shouldn't be possible\");\n      }\n      return {\n        ...state,\n        operandContents: [\n          ...state.operandContents.slice(0, index),\n          contents,\n          ...state.operandContents.slice(index + 1)\n        ],\n        operandShapes: [\n          ...state.operandShapes.slice(0, index),\n          JSON.stringify(shape.Ok),\n          ...state.operandShapes.slice(index + 1)\n        ],\n        operandVectors: [\n          ...state.operandVectors.slice(0, index),\n          shape.Ok.flat(2 ** 16),\n          ...state.operandVectors.slice(index + 1)\n        ]\n      };\n    }\n  } else {\n    throw new TypeError(JSON.stringify({ reducer: UPDATE_CONTENTS, action }));\n  }\n}\n\nexport default {\n  type: UPDATE_CONTENTS,\n  typeguard,\n  actionCreator,\n  reducer\n};\n","import { AppState, AppAction } from \"../appState\";\nimport { AnyAction } from \"../makeReducer\";\n\nconst ADD_SHAPE = \"addShape\";\n\n// tslint:disable-next-line: no-empty-interface\nexport interface AddShapeAction extends AnyAction {}\n\nconst typeguard = (action: AppAction): action is AddShapeAction => action.type === ADD_SHAPE;\n\nconst actionCreator = (): AddShapeAction => ({\n  type: ADD_SHAPE\n});\n\nconst reducer = (state: AppState, action: AppAction): AppState => {\n  if (typeguard(action)) {\n    return {\n      ...state,\n      visibleSizes: state.visibleSizes + 1\n    };\n  } else {\n    throw new TypeError(JSON.stringify({ action }));\n  }\n};\n\nexport default {\n  type: ADD_SHAPE,\n  typeguard,\n  actionCreator,\n  reducer\n};\n","export default function range(start: number, stop?: number, step: number = 1) {\n  if (step === 0) {\n    throw new Error(\"range: step must not be zero\");\n  }\n  if (stop === undefined) {\n    stop = start;\n    start = 0;\n  }\n  const result: number[] = [];\n  let val = start;\n  while (val < stop) {\n    result.push(val);\n    val += step;\n  }\n  return result;\n}\n","import updateEquationDuck, { UpdateEquationAction } from \"./ducks/updateEquation\";\nimport updateShapeDuck, { UpdateShapeAction } from \"./ducks/updateShape\";\nimport updateContentsDuck, { UpdateContentsAction } from \"./ducks/updateContents\";\nimport addShapeDuck, { AddShapeAction } from \"./ducks/addShape\";\nimport makeReducer from \"./makeReducer\";\nimport range from \"../utils/range\";\n\n// What is the state of the app?\n// (1) The string the user entered\n// (2) How many arrays are visible that can have a size entered\n// (3) The shapes that have been entered (as strings)\n// (4) The contents that have been entered (as strings)\n//\n// Note: (1) and (2) can conflict\n// This is OK!\n// However, when the string changes, update (2) automatically if the new string is valid\n\n// To make a new action:\n// (1) Make a duck (type, typeguard, actionCreator, reducer)\n// (2) Export the duck and an interface extending AnyAction from the duck file\n// (3) Import the duck and the action in this file\n// (4) Add the action to \"type AppAction\"\n// (5) Add the action to \"const appActions\"\n// (6) Add the duck to the call to makeReducer()\n\nexport type AppState = {\n  equation: string;\n  visibleSizes: number;\n  operandShapes: string[];\n  operandContents: string[];\n  operandVectors: number[][];\n};\n\nconst initialState: AppState = {\n  equation: \"ij,jk->ik\",\n  visibleSizes: 2,\n  operandShapes: [\"[2,3]\", \"[3,5]\"].concat(Array(254).fill(\"[]\")),\n  operandContents: [\n    JSON.stringify([range(3), range(3, 6)]),\n    JSON.stringify([range(0, 50, 10), range(50, 100, 10), range(100, 150, 10)])\n  ].concat(Array(254).fill(\"[]\")),\n  operandVectors: [range(6), range(0, 150, 10)].concat(Array(254).fill([]))\n};\n\nexport type AppAction =\n  | AddShapeAction\n  | UpdateEquationAction\n  | UpdateShapeAction\n  | UpdateContentsAction;\n\nconst appActions = {\n  addShape: addShapeDuck.actionCreator,\n  updateEquation: updateEquationDuck.actionCreator,\n  updateShape: updateShapeDuck.actionCreator,\n  updateContents: updateContentsDuck.actionCreator\n};\nconst reducer = makeReducer([\n  addShapeDuck,\n  updateEquationDuck,\n  updateShapeDuck,\n  updateContentsDuck\n]);\n\nexport { initialState, reducer, appActions };\n","import { AppState, AppAction } from \"./appState\";\n\nexport interface AnyAction {\n  type: string;\n}\n\nexport type Reducer = (state: AppState, action: AppAction) => AppState;\nexport type ActionCreator = (...args: any[]) => AppAction;\nexport type ActionTypeGuard = (action: AppAction) => boolean;\nexport type Duck = {\n  type: string;\n  typeguard: ActionTypeGuard;\n  actionCreator: ActionCreator;\n  reducer: Reducer;\n};\n\nexport default function makeReducer(ducks: Duck[]): Reducer {\n  const appReducers: { [key: string]: Reducer } = {};\n\n  ducks.forEach(duck => {\n    if (appReducers[duck.type]) {\n      throw new Error(`Multiple declarations for ${duck.type}`);\n    } else {\n      appReducers[duck.type] = duck.reducer;\n    }\n  });\n\n  return (state: AppState, action: AppAction): AppState =>\n    appReducers[action.type](state, action);\n}\n","import React, { ChangeEvent } from \"react\";\nimport { appActions, AppAction } from \"../appstate/appState\";\n\ntype ExplainerInputProps = {\n  equation: string;\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst EquationInput = ({ equation, dispatch }: ExplainerInputProps) => {\n  const onEquationChange = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(appActions.updateEquation(e.target.value));\n  };\n\n  return (\n    <p>\n      Equation: <input type=\"text\" onChange={onEquationChange} value={equation} />\n    </p>\n  );\n};\n\nexport default React.memo(EquationInput);\n","import { Contraction } from \"../types/einsum_typeguards\";\n\nfunction makeLatexString(contraction: Contraction): string {\n  // Out_{i,k}=\\sum_j A_{i,j} B_{j,k}\n  const outputMatrix = `Out_{${contraction.output_indices.join(\",\")}}`;\n  const summationSymbols = contraction.summation_indices.map(idx => `\\\\sum_${idx}`).join(\" \");\n  function makeInputMatrix(indices: string, n: number) {\n    const asciiA: number = \"A\".charCodeAt(0);\n    const matrixName = String.fromCharCode(asciiA + n);\n    const subscripts = indices.split(\"\").join(\",\");\n\n    return `${matrixName}_{${subscripts}}`;\n  }\n  const inputMatrices = contraction.operand_indices.map(makeInputMatrix).join(\" \");\n\n  return `${outputMatrix} = ${summationSymbols} ${inputMatrices}`;\n}\n\nexport default makeLatexString;\n","import { renderToString } from \"katex\";\nimport \"katex/dist/katex.min.css\";\nimport React from \"react\";\nimport { isErrorMessage, isContraction } from \"../types/einsum_typeguards\";\nimport makeLatexString from \"../utils/makeLatexString\";\nimport parseAndTypecheckJSON from \"../utils/parseAndTypecheckJSON\";\n\ntype EquationOutputProps = {\n  explanationJSON: string;\n};\n\nconst EquationOutput = (props: EquationOutputProps) => {\n  const { explanationJSON } = props;\n  let contractionErrorMessage;\n  let dangerousKatexHTML;\n  const explanation = parseAndTypecheckJSON(explanationJSON, isContraction, \"validateAsJson\");\n\n  if (isErrorMessage(explanation)) {\n    contractionErrorMessage = explanation.Err;\n  } else {\n    const contraction = explanation.Ok;\n    const latexString = makeLatexString(contraction);\n    dangerousKatexHTML = {\n      __html: renderToString(latexString)\n    };\n  }\n\n  return isErrorMessage(explanation) ? (\n    <>\n      <p>There was an error!</p>\n      <p>{contractionErrorMessage}</p>\n    </>\n  ) : (\n    <>\n      <p>Everything is cool!</p>\n      <div dangerouslySetInnerHTML={dangerousKatexHTML} />\n    </>\n  );\n};\n\nexport default EquationOutput;\n","import React from \"react\";\nimport { AppAction } from \"../appstate/appState\";\nimport EquationInput from \"./EquationInput\";\nimport { validateAsJson } from \"../pkg/einsum\";\nimport EquationOutput from \"./EquationOutput\";\n\ntype EquationProps = {\n  equation: string;\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst Equation = ({ equation, dispatch }: EquationProps) => {\n  const equationJSON = validateAsJson(equation);\n  return (\n    <div>\n      <EquationInput equation={equation} dispatch={dispatch} />\n      <EquationOutput explanationJSON={equationJSON} />\n    </div>\n  );\n};\n\nexport default React.memo(Equation);\n","import React from \"react\";\nimport { isErrorMessage, isSizedContraction, isContraction } from \"../types/einsum_typeguards\";\nimport parseAndTypecheckJSON from \"../utils/parseAndTypecheckJSON\";\n\ntype AxisLengthOutputProps = {\n  equationJSON: string;\n  sizedExplanationJSON: string;\n};\n\nconst AxisLengthsOutput = ({ equationJSON, sizedExplanationJSON }: AxisLengthOutputProps) => {\n  let sizeErrorMessage;\n  let outputSize;\n\n  const explanation = parseAndTypecheckJSON(equationJSON, isContraction, \"validateAsJson\");\n\n  const sizedExplanation = parseAndTypecheckJSON(\n    sizedExplanationJSON,\n    isSizedContraction,\n    \"validateAndSizeFromShapesAsStringAsJson\"\n  );\n\n  if (isErrorMessage(sizedExplanation)) {\n    sizeErrorMessage = sizedExplanation.Err;\n  } else if (isErrorMessage(explanation)) {\n    sizeErrorMessage = explanation.Err;\n  } else {\n    // export type Contraction = {\n    //   operand_indices: string[];\n    //   output_indices: string[];\n    //   summation_indices: string[];\n    // };\n    const contraction = explanation.Ok;\n\n    // export type SizedContraction = {\n    //   contraction: Contraction;\n    //   output_size: OutputSize;\n    // };\n    // export type OutputSize = { [key: string]: number };\n    const outputMap = sizedExplanation.Ok.output_size;\n\n    outputSize = (\n      <div>\n        <div>\n          Output size: [{contraction.output_indices.join(\", \")}] ={\" \"}\n          {JSON.stringify(contraction.output_indices.map(x => outputMap[x]))}\n        </div>\n        <div>\n          Summation index lengths:{\" \"}\n          {contraction.summation_indices.map(x => (\n            <span key={x}>\n              {x}: {outputMap[x]}\n            </span>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return isErrorMessage(sizedExplanation) ? (\n    <>\n      <p>The sizes don't work!</p>\n      <p>{sizeErrorMessage}</p>\n    </>\n  ) : (\n    <>\n      <p>The operands match the input and the sizes check out!</p>\n      {outputSize}\n    </>\n  );\n};\n\nexport default AxisLengthsOutput;\n","import React, { ChangeEvent } from \"react\";\nimport { appActions, AppAction } from \"../appstate/appState\";\n\ntype ShapesInputProps = {\n  visibleSizes: number;\n  operandShapes: string[];\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst ShapesInput = ({ operandShapes, visibleSizes, dispatch }: ShapesInputProps) => {\n  const shapes: string[] = [];\n  for (let i = 0; i < visibleSizes; i++) {\n    shapes.push(i < operandShapes.length ? operandShapes[i] : \"[]\");\n  }\n\n  const makeOnShapeChange = (index: number) => (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(appActions.updateShape(index, e.target.value));\n  };\n\n  return (\n    <div>\n      {shapes.map((data, index) => (\n        <div key={index}>\n          <span>\n            Shape of {String.fromCharCode(index + \"A\".charCodeAt(0))}:{\" \"}\n            <input type=\"text\" onChange={makeOnShapeChange(index)} value={data} />\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default React.memo(ShapesInput);\n","import React from \"react\";\nimport { AppAction } from \"../appstate/appState\";\nimport { validateAndSizeFromShapesAsStringAsJson, validateAsJson } from \"../pkg/einsum\";\nimport AxisLengthsOutput from \"./AxisLengthsOutput\";\nimport { parseShapeString } from \"../utils/parseShapeStrings\";\nimport ShapesInput from \"./ShapesInput\";\nimport { isErrorMessage } from \"../types/einsum_typeguards\";\n\ntype ShapesProps = {\n  equation: string;\n  visibleSizes: number;\n  operandShapes: string[];\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst Shapes = ({ equation, visibleSizes, operandShapes, dispatch }: ShapesProps) => {\n  const equationJSON = validateAsJson(equation);\n  const shapes = operandShapes.slice(0, visibleSizes);\n  const shapeArrays = shapes.map(parseShapeString);\n  let sizedExplanationJSON;\n  if (shapeArrays.some(isErrorMessage)) {\n    sizedExplanationJSON = JSON.stringify({\n      Err: JSON.stringify(shapeArrays.filter(isErrorMessage))\n    });\n  } else {\n    sizedExplanationJSON = validateAndSizeFromShapesAsStringAsJson(\n      equation,\n      JSON.stringify(shapeArrays.map(x => (x as { Ok: number[] }).Ok))\n    );\n  }\n\n  return (\n    <div>\n      <ShapesInput\n        dispatch={dispatch}\n        visibleSizes={visibleSizes}\n        operandShapes={operandShapes}\n      />\n      <AxisLengthsOutput\n        sizedExplanationJSON={sizedExplanationJSON}\n        equationJSON={equationJSON}\n      />\n    </div>\n  );\n};\n\nexport default React.memo(Shapes);\n","import React from \"react\";\nimport { isErrorMessage, isFlattenedOperand } from \"../types/einsum_typeguards\";\nimport parseOutput from \"../utils/parseOutputString\";\nimport parseAndTypecheckJSON from \"../utils/parseAndTypecheckJSON\";\n\ntype ComputationOutputProps = {\n  computationOutputJSON: string;\n};\n\nconst ComputationOutput = (props: ComputationOutputProps) => {\n  const { computationOutputJSON } = props;\n  let errorMessage;\n  let outputStr;\n  const computationOutput = parseAndTypecheckJSON(\n    computationOutputJSON,\n    isFlattenedOperand,\n    \"slowEinsumAsJson\"\n  );\n\n  if (isErrorMessage(computationOutput)) {\n    errorMessage = computationOutput.Err;\n  } else {\n    outputStr = JSON.stringify(parseOutput(computationOutput.Ok));\n  }\n\n  return isErrorMessage(computationOutput) ? (\n    <>\n      <p>Something went wrong!</p>\n      <div>{errorMessage}</div>\n    </>\n  ) : (\n    <>\n      <p>Your computation is valid!</p>\n      <div>Einsum Result: {outputStr}</div>\n    </>\n  );\n};\n\nexport default ComputationOutput;\n","import React, { ChangeEvent } from \"react\";\nimport { appActions, AppAction } from \"../appstate/appState\";\n\ntype ContentsInputProps = {\n  visibleSizes: number;\n  operandContents: string[];\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst ContentsInput = ({ operandContents, visibleSizes, dispatch }: ContentsInputProps) => {\n  const contents: string[] = [];\n  for (let i = 0; i < visibleSizes; i++) {\n    contents.push(i < operandContents.length ? operandContents[i] : \"[]\");\n  }\n\n  const makeOnContentsChange = (index: number) => (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(appActions.updateContents(index, e.target.value));\n  };\n\n  return (\n    <div>\n      {contents.map((data, index) => (\n        <div key={index}>\n          <span>\n            Contents of {String.fromCharCode(index + \"A\".charCodeAt(0))}:{\" \"}\n            <input type=\"text\" onChange={makeOnContentsChange(index)} value={data} />\n          </span>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default React.memo(ContentsInput);\n","import React from \"react\";\nimport { AppAction } from \"../appstate/appState\";\nimport { slowEinsumAsJson } from \"../pkg/einsum\";\nimport ComputationOutput from \"./ComputationOutput\";\nimport { parseShapeString } from \"../utils/parseShapeStrings\";\nimport ContentsInput from \"./ContentsInput\";\nimport { isErrorMessage } from \"../types/einsum_typeguards\";\nimport { parseDataString } from \"../utils/parseDataString\";\n\ntype ComputationProps = {\n  equation: string;\n  visibleSizes: number;\n  operandShapes: string[];\n  operandContents: string[];\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst Computation = ({\n  equation,\n  visibleSizes,\n  operandShapes,\n  operandContents,\n  dispatch\n}: ComputationProps) => {\n  const shapes = operandShapes.slice(0, visibleSizes);\n  const contents = operandContents.slice(0, visibleSizes);\n  const operands = [];\n  for (let i = 0; i < Math.min(shapes.length, contents.length); i++) {\n    const shape = parseShapeString(shapes[i]);\n    const data = parseDataString(contents[i]);\n\n    if (!isErrorMessage(shape) && !isErrorMessage(data) && typeof data.Ok !== \"number\") {\n      operands.push({\n        shape: shape.Ok,\n        contents: data.Ok.flat(2 ** 16)\n      });\n    } else {\n      operands.push({\n        Err: `Array ${i} doesn't work`\n      });\n    }\n  }\n\n  const operandsJSON = JSON.stringify(operands);\n  const computationOutputJSON = slowEinsumAsJson(equation, operandsJSON);\n\n  return (\n    <div>\n      <ContentsInput\n        dispatch={dispatch}\n        visibleSizes={visibleSizes}\n        operandContents={operandContents}\n      />\n      <ComputationOutput computationOutputJSON={computationOutputJSON} />\n    </div>\n  );\n};\n\nexport default React.memo(Computation);\n","import React, { useReducer } from \"react\";\nimport { reducer, initialState } from \"../appstate/appState\";\nimport \"./App.css\";\nimport Equation from \"./Equation\";\nimport Shapes from \"./Shapes\";\nimport Computation from \"./Computation\";\n\nconst EinsumExplainer = () => {\n  const [appState, dispatch] = useReducer(reducer, initialState);\n  const { equation, visibleSizes, operandContents, operandShapes } = appState;\n\n  return (\n    <div className=\"App\">\n      <Equation equation={equation} dispatch={dispatch} />\n      <Shapes\n        equation={equation}\n        dispatch={dispatch}\n        visibleSizes={visibleSizes}\n        operandShapes={operandShapes}\n      />\n      <Computation\n        equation={equation}\n        dispatch={dispatch}\n        visibleSizes={visibleSizes}\n        operandContents={operandContents}\n        operandShapes={operandShapes}\n      />\n    </div>\n  );\n};\n\nexport default EinsumExplainer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport EinsumExplainer from \"./components/EinsumExplainer\";\nimport * as serviceWorker from \"./utils/serviceWorker\";\nimport init from \"./pkg/einsum.js\";\n\n(async function run() {\n  await init(\"./pkg/einsum_bg.wasm\");\n  ReactDOM.render(<EinsumExplainer />, document.getElementById(\"root\"));\n})();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}