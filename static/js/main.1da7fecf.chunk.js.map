{"version":3,"sources":["pkg/einsum_wasm.js","types/einsum_typeguards.ts","utils/parseAndTypecheckJSON.ts","appstate/ducks/updateEquation.ts","utils/parseShapeStrings.ts","utils/parseOutputString.ts","appstate/ducks/updateShape.ts","utils/parseDataString.ts","appstate/ducks/updateContents.ts","appstate/makeOperand.ts","utils/range.ts","appstate/presets.ts","appstate/ducks/loadPreset.ts","appstate/appState.ts","appstate/makeReducer.ts","components/layout/InputColumn.tsx","components/EquationInput.tsx","utils/makeLatexString.ts","components/layout/OutputColumn.tsx","components/EquationOutput.tsx","components/layout/InputOutputRow.tsx","components/Equation.tsx","components/AxisLengthsOutput.tsx","components/ShapesInput.tsx","components/Shapes.tsx","components/ComputationOutput.tsx","components/ContentsInput.tsx","components/Computation.tsx","components/Presets.tsx","components/EinsumExplainer.tsx","components/App.tsx","utils/serviceWorker.js","index.js"],"names":["wasm","passStringToWasm","__exports","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","cachegetUint8Memory","getUint8Memory","buffer","memory","Uint8Array","encodeInto","arg","size","length","ptr","__wbindgen_malloc","offset","mem","code","charCodeAt","slice","__wbindgen_realloc","view","subarray","written","buf","encode","set","cachedTextDecoder","TextDecoder","getStringFromWasm","len","decode","cachedGlobalArgumentPtr","globalArgumentPtr","__wbindgen_global_argument_ptr","cachegetUint32Memory","getUint32Memory","Uint32Array","validateAsJson","input_string","ptr0","len0","retptr","rustptr","rustlen","realRet","__wbindgen_free","validateAndSizeFromShapesAsStringAsJson","operand_shapes","ptr1","len1","einsumPathAsJson","flattened_operands_as_string","slowEinsumAsJson","init","module","result","imports","./einsum_wasm","URL","Request","response","fetch","WebAssembly","instantiateStreaming","catch","e","console","warn","then","r","arrayBuffer","bytes","instantiate","Instance","instance","_ref","exports","__wbindgen_wasm_module","isErrorMessage","hasOwnProperty","isNumberArray","Array","every","x","getShape","arr","Ok","innerShape","_loop","i","nextShape","v","val","ix","Err","_ret","concat","Object","toConsumableArray","isNDArray","isProbablyNDArray","first","isContraction","operand_indices","isSizedContraction","contraction","entries","_ref2","slicedToArray","isOutputSize","output_size","isFlattenedOperand","shape","contents","parseAndTypecheckJSON","str","typeguard","problematicFunctionName","obj","JSON","parse","_unused","err","isOk","enforce","action","type","equation","updateEquation","actionCreator","reducer","state","visibleSizes","einsumExplanation","objectSpread","TypeError","stringify","parseShapeString","shapeString","bracketedShapeString","replace","parseOutput","output","unflatten","stride","push","UPDATE_SHAPE","index","getContents","totalLength","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","return","fill","ret","updateShape","data","oldOperand","operandStates","contentsVector","contentsStr","newNDArray","shapeStr","parseDataString","dataString","bracketedDataString","UPDATE_CONTENTS","updateContents","Error","flat","Math","pow","makeOperand","start","arguments","step","stop","range","reduce","product","ndArray","getState","_presetFn","presetFn","presets","matrixMultiplication","description","matrixTransposition","sum2D","columnSum","rowSum","getDiagonal","matrixVectorMultiplication","outerProduct","batchMM1","batchMM2","tensorContraction","bilinearTransformation","preset","loadPreset","initialState","appActions","updateEquationDuck","updateShapeDuck","updateContentsDuck","loadPresetDuck","ducks","appReducers","forEach","duck","makeReducer","InputColumn","prompt","control","react_default","a","createElement","className","React","memo","dispatch","onChange","target","makeLatexString","outputMatrix","output_indices","join","summationSymbols","summation_indices","map","idx","inputMatrices","indices","n","asciiA","matrixName","String","fromCharCode","subscripts","OutputColumn","index_es","title","icon","faTimesCircle","color","faCheckCircle","props","explanation","explanationJSON","dangerouslySetInnerHTML","__html","renderToString","InputOutputRow","input","style","paddingTop","paddingBottom","equationJSON","components_EquationInput","components_EquationOutput","sizedExplanationJSON","sizedExplanation","outputMap","operandShapes","shapes","makeOnShapeChange","Fragment","key","shapeArrays","some","filter","_ref3","Tensor","components_ShapesInput","components_AxisLengthsOutput","computationOutputJSON","einsumPathJSON","computationOutput","operandContents","makeOnContentsChange","operands","min","operandsJSON","components_ContentsInput","components_ComputationOutput","presetChoices","_useState","useState","_useState2","selectedPreset","setSelectedPreset","name","EinsumExplainer","appState","components_Presets","components_Equation","components_Shapes","components_Computation","App","_useReducer","useReducer","_useReducer2","Date","now","components_EinsumExplainer","Boolean","window","location","hostname","match","_run","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","ReactDOM","render","src_components_App","document","getElementById","apply","this","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1da7fecf.chunk.js","sourcesContent":["\nconst __exports = {};\nlet wasm;\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            arg = arg.slice(offset);\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + arg.length * 3);\n            const view = getUint8Memory().subarray(ptr + offset, ptr + size);\n            const ret = cachedTextEncoder.encodeInto(arg, view);\n\n            offset += ret.written;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n\n        let size = arg.length;\n        let ptr = wasm.__wbindgen_malloc(size);\n        let offset = 0;\n        {\n            const mem = getUint8Memory();\n            for (; offset < arg.length; offset++) {\n                const code = arg.charCodeAt(offset);\n                if (code > 0x7F) break;\n                mem[ptr + offset] = code;\n            }\n        }\n\n        if (offset !== arg.length) {\n            const buf = cachedTextEncoder.encode(arg.slice(offset));\n            ptr = wasm.__wbindgen_realloc(ptr, size, size = offset + buf.length);\n            getUint8Memory().set(buf, ptr + offset);\n            offset += buf.length;\n        }\n        WASM_VECTOR_LEN = offset;\n        return ptr;\n    };\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = wasm.__wbindgen_global_argument_ptr();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory;\n}\n/**\n* @param {string} input_string\n* @returns {string}\n*/\nexport function validateAsJson(input_string) {\n    const ptr0 = passStringToWasm(input_string);\n    const len0 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.validateAsJson(retptr, ptr0, len0);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n\n    }\n\n}\n__exports.validateAsJson = validateAsJson\n\n/**\n* @param {string} input_string\n* @param {string} operand_shapes\n* @returns {string}\n*/\nexport function validateAndSizeFromShapesAsStringAsJson(input_string, operand_shapes) {\n    const ptr0 = passStringToWasm(input_string);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm(operand_shapes);\n    const len1 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.validateAndSizeFromShapesAsStringAsJson(retptr, ptr0, len0, ptr1, len1);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n__exports.validateAndSizeFromShapesAsStringAsJson = validateAndSizeFromShapesAsStringAsJson\n\n/**\n* @param {string} input_string\n* @param {string} flattened_operands_as_string\n* @returns {string}\n*/\nexport function einsumPathAsJson(input_string, flattened_operands_as_string) {\n    const ptr0 = passStringToWasm(input_string);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm(flattened_operands_as_string);\n    const len1 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.einsumPathAsJson(retptr, ptr0, len0, ptr1, len1);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n__exports.einsumPathAsJson = einsumPathAsJson\n\n/**\n* @param {string} input_string\n* @param {string} flattened_operands_as_string\n* @returns {string}\n*/\nexport function slowEinsumAsJson(input_string, flattened_operands_as_string) {\n    const ptr0 = passStringToWasm(input_string);\n    const len0 = WASM_VECTOR_LEN;\n    const ptr1 = passStringToWasm(flattened_operands_as_string);\n    const len1 = WASM_VECTOR_LEN;\n    const retptr = globalArgumentPtr();\n    try {\n        wasm.slowEinsumAsJson(retptr, ptr0, len0, ptr1, len1);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        wasm.__wbindgen_free(rustptr, rustlen * 1);\n        return realRet;\n\n\n    } finally {\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n\n    }\n\n}\n__exports.slowEinsumAsJson = slowEinsumAsJson\n\nfunction init(module) {\n    let result;\n    const imports = { './einsum_wasm': __exports };\n\n    if (module instanceof URL || typeof module === 'string' || module instanceof Request) {\n\n        const response = fetch(module);\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            result = WebAssembly.instantiateStreaming(response, imports)\n            .catch(e => {\n                console.warn(\"`WebAssembly.instantiateStreaming` failed. Assuming this is because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n                return response\n                .then(r => r.arrayBuffer())\n                .then(bytes => WebAssembly.instantiate(bytes, imports));\n            });\n        } else {\n            result = response\n            .then(r => r.arrayBuffer())\n            .then(bytes => WebAssembly.instantiate(bytes, imports));\n        }\n    } else {\n\n        result = WebAssembly.instantiate(module, imports)\n        .then(result => {\n            if (result instanceof WebAssembly.Instance) {\n                return { instance: result, module };\n            } else {\n                return result;\n            }\n        });\n    }\n    return result.then(({instance, module}) => {\n        wasm = instance.exports;\n        init.__wbindgen_wasm_module = module;\n\n        return wasm;\n    });\n}\n\nexport default init;\n\n","export type ErrorMessage = {\n  Err: string;\n};\n\nexport function isErrorMessage(r: any): r is ErrorMessage {\n  return (r as object).hasOwnProperty(\"Err\");\n}\n\nexport type Result<T> = { Ok: T } | ErrorMessage;\n\nexport function isOk<T>(r: any, typeguard: (obj: any) => obj is T): r is Result<T> {\n  return (r as object).hasOwnProperty(\"Ok\") && typeguard((r as { Ok: T }).Ok);\n}\n\nexport function enforce<T>(\n  obj: any,\n  typeguard: (obj: any) => obj is T,\n  err: ErrorMessage\n): Result<T> {\n  if (isOk(obj, typeguard)) {\n    return obj;\n  } else if (isErrorMessage(obj)) {\n    return obj;\n  } else {\n    return err;\n  }\n}\n\nexport function isNumberArray(r: any): r is number[] {\n  return r instanceof Array && r.every(x => typeof x === \"number\");\n}\n\nexport type NDArray = number | NDArrayArray;\n\ninterface NDArrayArray extends Array<NDArray> {}\n\nfunction isProbablyNDArray(r: any): r is NDArray {\n  if (typeof r === \"number\") {\n    return true;\n  }\n  if (!(r instanceof Array)) {\n    return false;\n  }\n  if (isNumberArray(r) && r.length !== 0) {\n    return true;\n  }\n  const first = r[0];\n  if (!(first instanceof Array) || first.length === 0) {\n    return false;\n  }\n  const len = first.length;\n  return (\n    len !== 0 && r.every(x => x instanceof Array && x.length === len && isProbablyNDArray(x))\n  );\n}\n\nexport function getShape(arr: NDArray): Result<number[]> {\n  if (typeof arr === \"number\") {\n    return { Ok: [] };\n  }\n  const innerShape = getShape(arr[0]);\n  if (isErrorMessage(innerShape)) {\n    return innerShape;\n  }\n  for (let i = 1; i < arr.length; i++) {\n    const nextShape = getShape(arr[i]);\n    if (isErrorMessage(nextShape)) {\n      return nextShape;\n    }\n    if (!innerShape.Ok.every((val, ix) => nextShape.Ok[ix] === val)) {\n      return {\n        Err: \"Array contains elements with different shapes\"\n      };\n    }\n  }\n  return { Ok: [arr.length, ...innerShape.Ok] };\n}\n\nexport function isNDArray(r: any): r is NDArray {\n  if (!isProbablyNDArray(r)) {\n    return false;\n  }\n  const shape = getShape(r);\n  return !isErrorMessage(shape);\n}\n\nexport type Contraction = {\n  operand_indices: string[][];\n  output_indices: string[];\n  summation_indices: string[];\n};\n\nexport function isContraction(r: object): r is Contraction {\n  return (\n    r.hasOwnProperty(\"operand_indices\") &&\n    (r as Contraction).operand_indices instanceof Array &&\n    (r as Contraction).operand_indices.every(x => x instanceof Array) &&\n    r.hasOwnProperty(\"output_indices\") &&\n    r.hasOwnProperty(\"summation_indices\")\n  );\n}\n\nexport type OutputSize = { [key: string]: number };\n\nexport function isOutputSize(r: any): r is OutputSize {\n  return Object.entries(r as object).every(([_, val]) => typeof val === \"number\");\n}\n\nexport type SizedContraction = {\n  contraction: Contraction;\n  output_size: OutputSize;\n};\n\nexport function isSizedContraction(r: object): r is SizedContraction {\n  return (\n    r.hasOwnProperty(\"contraction\") &&\n    isContraction((r as SizedContraction).contraction) &&\n    r.hasOwnProperty(\"output_size\") &&\n    isOutputSize((r as SizedContraction).output_size)\n  );\n}\n\nexport type FlattenedOperand = {\n  shape: number[];\n  contents: number[];\n};\n\nexport function isFlattenedOperand(r: object): r is FlattenedOperand {\n  return (\n    r.hasOwnProperty(\"shape\") &&\n    isNumberArray((r as FlattenedOperand).shape) &&\n    r.hasOwnProperty(\"contents\") &&\n    isNumberArray((r as FlattenedOperand).contents)\n  );\n}\n","import { Result, enforce } from \"../types/einsum_typeguards\";\n\nexport default function parseAndTypecheckJSON<T>(\n  str: string,\n  typeguard: (r: any) => r is T,\n  problematicFunctionName: string\n): Result<T> {\n  let obj;\n  try {\n    obj = JSON.parse(str);\n  } catch {\n    return {\n      Err: `${problematicFunctionName} returned invalid JSON`\n    };\n  }\n  return enforce(obj, typeguard, {\n    Err: `${problematicFunctionName} returned valid JSON but of the wrong type`\n  });\n}\n","import { validateAsJson } from \"../../pkg/einsum_wasm\";\nimport { isContraction, isErrorMessage } from \"../../types/einsum_typeguards\";\nimport { AppState, AppAction } from \"../appState\";\nimport { AnyAction } from \"../makeReducer\";\nimport parseAndTypecheckJSON from \"../../utils/parseAndTypecheckJSON\";\n\nconst UPDATE_EQUATION = \"updateEquation\";\n\nexport interface UpdateEquationAction extends AnyAction {\n  equation: string;\n}\n\nconst typeguard = (action: AppAction): action is UpdateEquationAction =>\n  action.type === UPDATE_EQUATION &&\n  action.hasOwnProperty(\"equation\") &&\n  typeof (action as UpdateEquationAction).equation === \"string\";\n\nconst actionCreator = (equation: string): UpdateEquationAction => ({\n  type: UPDATE_EQUATION,\n  equation\n});\n\nconst reducer = (state: AppState, action: AppAction): AppState => {\n  if (typeguard(action)) {\n    const { equation } = action;\n    let { visibleSizes } = state;\n\n    const einsumExplanation = parseAndTypecheckJSON(\n      validateAsJson(equation),\n      isContraction,\n      \"validateAsJson\"\n    );\n    if (!isErrorMessage(einsumExplanation)) {\n      visibleSizes = einsumExplanation.Ok.operand_indices.length;\n    }\n\n    return {\n      ...state,\n      visibleSizes,\n      equation: (action as UpdateEquationAction).equation\n    };\n  } else {\n    throw new TypeError(JSON.stringify({ action }));\n  }\n};\n\nexport default {\n  type: UPDATE_EQUATION,\n  typeguard,\n  actionCreator,\n  reducer\n};\n","import { Result, isNumberArray } from \"../types/einsum_typeguards\";\n\nfunction parseShapeString(shapeString: string): Result<number[]> {\n  const bracketedShapeString = shapeString.replace(/\\(/g, \"[\").replace(/\\)/g, \"]\");\n  let obj;\n  try {\n    obj = JSON.parse(bracketedShapeString);\n  } catch {\n    return {\n      Err: \"Not a valid shape\"\n    };\n  }\n  return isNumberArray(obj) ? { Ok: obj } : { Err: \"Not a valid shape\" };\n}\n\nexport { parseShapeString };\n","import { FlattenedOperand, NDArray } from \"../types/einsum_typeguards\";\n\nfunction unflatten(shape: number[], contents: number[]): NDArray {\n  switch (shape.length) {\n    case 0:\n      return contents[0];\n    case 1:\n      return contents.slice();\n    default:\n      const result: NDArray = [];\n      let stride = 1;\n      for (let i = 1; i < shape.length; i++) {\n        stride *= shape[i];\n      }\n      for (let i = 0; i < shape[0]; i++) {\n        result.push(unflatten(shape.slice(1), contents.slice(i * stride, (i + 1) * stride)));\n      }\n      return result;\n  }\n}\n\nexport default function parseOutput(output: FlattenedOperand): NDArray {\n  const { shape, contents } = output;\n  return unflatten(shape, contents);\n}\n","import { AppState, AppAction } from \"../appState\";\nimport { AnyAction } from \"../makeReducer\";\nimport { parseShapeString } from \"../../utils/parseShapeStrings\";\nimport { isErrorMessage } from \"../../types/einsum_typeguards\";\nimport parseOutput from \"../../utils/parseOutputString\";\n\nexport interface UpdateShapeAction extends AnyAction {\n  index: number;\n  shape: string;\n}\n\nconst UPDATE_SHAPE = \"updateShape\";\nfunction typeguard(action: AppAction): action is UpdateShapeAction {\n  return (\n    action.type === UPDATE_SHAPE &&\n    action.hasOwnProperty(\"index\") &&\n    typeof (action as UpdateShapeAction).index === \"number\" &&\n    action.hasOwnProperty(\"shape\") &&\n    typeof (action as UpdateShapeAction).shape === \"string\"\n  );\n}\n\nfunction actionCreator(index: number, shape: string): UpdateShapeAction {\n  return {\n    type: UPDATE_SHAPE,\n    index,\n    shape\n  };\n}\n\nfunction getContents(v: number[], shape: number[]) {\n  let totalLength = 1;\n  for (const s of shape) {\n    totalLength *= s;\n  }\n  if (!(v instanceof Array)) {\n    return Array(totalLength).fill(0);\n  }\n  const ret = [];\n  for (let i = 0; i < totalLength; i++) {\n    if (typeof v[i] !== \"number\") {\n      ret.push(0);\n    } else {\n      ret.push(v[i]);\n    }\n  }\n  return ret;\n}\n\nfunction reducer(state: AppState, action: AppAction): AppState {\n  if (typeguard(action)) {\n    const { index, shape } = action;\n    const data = parseShapeString(shape);\n    const oldOperand = state.operandStates[index];\n    const { contentsVector } = oldOperand;\n    let { contentsStr } = oldOperand;\n    if (!isErrorMessage(data)) {\n      const newNDArray = parseOutput({\n        shape: data.Ok,\n        contents: getContents(contentsVector, data.Ok)\n      });\n      contentsStr = JSON.stringify(newNDArray);\n    }\n\n    return {\n      ...state,\n      operandStates: [\n        ...state.operandStates.slice(0, index),\n        {\n          ...oldOperand,\n          shapeStr: shape,\n          contentsStr,\n          contentsVector\n        },\n        ...state.operandStates.slice(index + 1)\n      ]\n    };\n  } else {\n    throw new TypeError(JSON.stringify({ reducer: UPDATE_SHAPE, action }));\n  }\n}\n\nexport default {\n  type: UPDATE_SHAPE,\n  typeguard,\n  actionCreator,\n  reducer\n};\n","import { Result, isNDArray, NDArray } from \"../types/einsum_typeguards\";\n\nfunction parseDataString(dataString: string): Result<NDArray> {\n  const bracketedDataString = dataString.replace(/\\(/g, \"[\").replace(/\\)/g, \"]\");\n  let obj;\n  try {\n    obj = JSON.parse(bracketedDataString);\n  } catch {\n    return {\n      Err: \"Not a valid ndArray\"\n    };\n  }\n  return isNDArray(obj) ? { Ok: obj } : { Err: \"Not a valid ndArray\" };\n}\n\nexport { parseDataString };\n","import { AppState, AppAction } from \"../appState\";\nimport { AnyAction } from \"../makeReducer\";\nimport { parseDataString } from \"../../utils/parseDataString\";\nimport { isErrorMessage, getShape } from \"../../types/einsum_typeguards\";\n\nexport interface UpdateContentsAction extends AnyAction {\n  index: number;\n  contents: string;\n}\n\nconst UPDATE_CONTENTS = \"updateContents\";\nfunction typeguard(action: AppAction): action is UpdateContentsAction {\n  return (\n    action.type === UPDATE_CONTENTS &&\n    action.hasOwnProperty(\"index\") &&\n    typeof (action as UpdateContentsAction).index === \"number\" &&\n    action.hasOwnProperty(\"contents\") &&\n    typeof (action as UpdateContentsAction).contents === \"string\"\n  );\n}\n\nfunction actionCreator(index: number, contents: string): UpdateContentsAction {\n  return {\n    type: UPDATE_CONTENTS,\n    index,\n    contents\n  };\n}\n\nfunction reducer(state: AppState, action: AppAction): AppState {\n  if (typeguard(action)) {\n    const { index, contents } = action;\n    const data = parseDataString(contents);\n    const oldOperand = state.operandStates[index];\n    let { shapeStr, contentsVector } = oldOperand;\n    if (!isErrorMessage(data)) {\n      const shape = getShape(data.Ok);\n      if (isErrorMessage(shape)) {\n        throw new Error(\"This shouldn't be possible\");\n      }\n      shapeStr = JSON.stringify(shape.Ok)\n        .replace(/\\[/g, \"(\")\n        .replace(/\\]/g, \")\");\n      contentsVector = (data.Ok as number[]).flat(2 ** 16);\n    }\n\n    return {\n      ...state,\n      operandStates: [\n        ...state.operandStates.slice(0, index),\n        {\n          ...oldOperand,\n          shapeStr,\n          contentsVector,\n          contentsStr: contents\n        },\n        ...state.operandStates.slice(index + 1)\n      ]\n    };\n  } else {\n    throw new TypeError(JSON.stringify({ reducer: UPDATE_CONTENTS, action }));\n  }\n}\n\nexport default {\n  type: UPDATE_CONTENTS,\n  typeguard,\n  actionCreator,\n  reducer\n};\n","import range from \"../utils/range\";\nimport parseOutput from \"../utils/parseOutputString\";\nimport { operandState } from \"./appState\";\n\nexport default function makeOperand(\n  shape: number[],\n  start: number = 0,\n  step: number = 1\n): operandState {\n  if (shape.length === 0) {\n    return {\n      shapeStr: \"()\",\n      contentsStr: \"[]\",\n      contentsVector: []\n    };\n  }\n  const totalSize = shape.reduce((product, val) => val * product, 1);\n  const contents = range(start, start + step * totalSize, step);\n  const ndArray = parseOutput({ shape, contents });\n  return {\n    shapeStr: JSON.stringify(shape)\n      .replace(/\\[/g, \"(\")\n      .replace(/\\]/g, \")\"),\n    contentsStr: JSON.stringify(ndArray),\n    contentsVector: contents\n  };\n}\n","export default function range(start: number, stop?: number, step: number = 1) {\n  if (step === 0) {\n    throw new Error(\"range: step must not be zero\");\n  }\n  if (stop === undefined) {\n    stop = start;\n    start = 0;\n  }\n  const result: number[] = [];\n  let val = start;\n  while (val < stop) {\n    result.push(val);\n    val += step;\n  }\n  return result;\n}\n","import { AppState, operandState } from \"./appState\";\nimport makeOperand from \"./makeOperand\";\n\ntype PartialAppState = {\n  equation: string;\n  operandStates: operandState[];\n};\n\ntype Preset = {\n  description: string;\n  presetFn: () => PartialAppState;\n};\n\nconst presets: { [key: string]: Preset } = {\n  matrixMultiplication: {\n    description: \"Matrix Multiplication\",\n    presetFn: () => ({\n      equation: \"ij,jk->ik\",\n      operandStates: [makeOperand([2, 3], 0, 1), makeOperand([3, 5], 0, 10)]\n    })\n  },\n  matrixTransposition: {\n    description: \"Matrix Transposition (Implicit)\",\n    presetFn: () => ({\n      equation: \"ji\",\n      operandStates: [makeOperand([2, 3], 0, 1)]\n    })\n  },\n  sum2D: {\n    description: \"Sum All Elements (2D)\",\n    presetFn: () => ({\n      equation: \"ij->\",\n      operandStates: [makeOperand([2, 3], 0, 1)]\n    })\n  },\n  columnSum: {\n    description: \"Sum Each Column\",\n    presetFn: () => ({\n      equation: \"ij->j\",\n      operandStates: [makeOperand([2, 3], 0, 1)]\n    })\n  },\n  rowSum: {\n    description: \"Sum Each Row\",\n    presetFn: () => ({\n      equation: \"ij->i\",\n      operandStates: [makeOperand([2, 3], 0, 1)]\n    })\n  },\n  getDiagonal: {\n    description: \"Take the Diagonal\",\n    presetFn: () => ({\n      equation: \"ii->i\",\n      operandStates: [makeOperand([3, 3], 0, 1)]\n    })\n  },\n  matrixVectorMultiplication: {\n    description: \"Matrix-Vector Multiplication\",\n    presetFn: () => ({\n      equation: \"ij,j->i\",\n      operandStates: [makeOperand([2, 3], 0, 1), makeOperand([3], 0, 10)]\n    })\n  },\n  outerProduct: {\n    description: \"Outer Product\",\n    presetFn: () => ({\n      equation: \"i,j->ij\",\n      operandStates: [makeOperand([3], 0, 1), makeOperand([4], 10, 10)]\n    })\n  },\n  batchMM1: {\n    description: \"Batch Matrix Multiplication (single RHS)\",\n    presetFn: () => ({\n      equation: \"nij,jk->nik\",\n      operandStates: [makeOperand([4, 2, 5], 0, 1), makeOperand([5, 3], 0, 10)]\n    })\n  },\n  batchMM2: {\n    description: \"Batch Matrix Multiplication (multiple RHS)\",\n    presetFn: () => ({\n      equation: \"nij,njk->nik\",\n      operandStates: [makeOperand([4, 2, 5], 0, 1), makeOperand([4, 5, 3], 0, 10)]\n    })\n  },\n  tensorContraction: {\n    description: \"Tensor Contraction\",\n    presetFn: () => ({\n      equation: \"pqrs,tuqvr->pstuv\",\n      operandStates: [makeOperand([2, 3, 5, 7], 0, 1), makeOperand([11, 13, 3, 17, 5], 0, 10)]\n    })\n  },\n  bilinearTransformation: {\n    description: \"Bilinear Transformation\",\n    presetFn: () => ({\n      equation: \"ik,jkl,il->ij\",\n      operandStates: [\n        makeOperand([2, 3], 0, 1),\n        makeOperand([5, 3, 7], 0, 10),\n        makeOperand([2, 7], 0, 100)\n      ]\n    })\n  }\n};\n\nexport function getState({ presetFn }: Preset): AppState {\n  const { equation, operandStates } = presetFn();\n  const visibleSizes = operandStates.length;\n  return {\n    equation,\n    visibleSizes,\n    operandStates: [...operandStates, ...Array(256 - visibleSizes).fill(makeOperand([]))]\n  };\n}\n\nexport default presets;\n","import { AppState, AppAction } from \"../appState\";\nimport { AnyAction } from \"../makeReducer\";\nimport presets, { getState } from \"../presets\";\n\nconst LOAD_PRESET = \"loadPreset\";\n\nexport interface LoadPresetAction extends AnyAction {\n  preset: string;\n}\n\nconst typeguard = (action: AppAction): action is LoadPresetAction =>\n  action.type === LOAD_PRESET &&\n  typeof (action as LoadPresetAction).preset === \"string\" &&\n  presets.hasOwnProperty((action as LoadPresetAction).preset);\n\nconst actionCreator = (preset: string): LoadPresetAction => ({\n  type: LOAD_PRESET,\n  preset\n});\n\nconst reducer = (state: AppState, action: AppAction): AppState => {\n  if (typeguard(action)) {\n    return getState(presets[action.preset]);\n  } else {\n    throw new TypeError(JSON.stringify({ action }));\n  }\n};\n\nexport default {\n  type: LOAD_PRESET,\n  typeguard,\n  actionCreator,\n  reducer\n};\n","import updateEquationDuck, { UpdateEquationAction } from \"./ducks/updateEquation\";\nimport updateShapeDuck, { UpdateShapeAction } from \"./ducks/updateShape\";\nimport updateContentsDuck, { UpdateContentsAction } from \"./ducks/updateContents\";\nimport makeReducer from \"./makeReducer\";\nimport presets, { getState } from \"./presets\";\nimport loadPresetDuck, { LoadPresetAction } from \"./ducks/loadPreset\";\n\n// What is the state of the app?\n// (1) The string the user entered\n// (2) How many arrays are visible that can have a size entered\n// (3) The shapes that have been entered (as strings)\n// (4) The contents that have been entered (as strings)\n//\n// Note: (1) and (2) can conflict\n// This is OK!\n// However, when the string changes, update (2) automatically if the new string is valid\n\n// To make a new action:\n// (1) Make a duck (type, typeguard, actionCreator, reducer)\n// (2) Export the duck and an interface extending AnyAction from the duck file\n// (3) Import the duck and the action in this file\n// (4) Add the action to \"type AppAction\"\n// (5) Add the action to \"const appActions\"\n// (6) Add the duck to the call to makeReducer()\n\nexport type operandState = {\n  shapeStr: string;\n  contentsStr: string;\n  contentsVector: number[];\n};\n\nexport type AppState = {\n  equation: string;\n  visibleSizes: number;\n  operandStates: operandState[];\n};\n\nconst initialState: AppState = getState(presets.matrixMultiplication);\n\nexport type AppAction =\n  | UpdateEquationAction\n  | UpdateShapeAction\n  | UpdateContentsAction\n  | LoadPresetAction;\n\nconst appActions = {\n  updateEquation: updateEquationDuck.actionCreator,\n  updateShape: updateShapeDuck.actionCreator,\n  updateContents: updateContentsDuck.actionCreator,\n  loadPreset: loadPresetDuck.actionCreator\n};\nconst reducer = makeReducer([\n  loadPresetDuck,\n  updateEquationDuck,\n  updateShapeDuck,\n  updateContentsDuck\n]);\n\nexport { initialState, reducer, appActions };\n","import { AppState, AppAction } from \"./appState\";\n\nexport interface AnyAction {\n  type: string;\n}\n\nexport type Reducer = (state: AppState, action: AppAction) => AppState;\nexport type ActionCreator = (...args: any[]) => AppAction;\nexport type ActionTypeGuard = (action: AppAction) => boolean;\nexport type Duck = {\n  type: string;\n  typeguard: ActionTypeGuard;\n  actionCreator: ActionCreator;\n  reducer: Reducer;\n};\n\nexport default function makeReducer(ducks: Duck[]): Reducer {\n  const appReducers: { [key: string]: Reducer } = {};\n\n  ducks.forEach(duck => {\n    if (appReducers[duck.type]) {\n      throw new Error(`Multiple declarations for ${duck.type}`);\n    } else {\n      appReducers[duck.type] = duck.reducer;\n    }\n  });\n\n  return (state: AppState, action: AppAction): AppState =>\n    appReducers[action.type](state, action);\n}\n","import React from \"react\";\n\ntype InputColumnProps = {\n  prompt: string;\n  control: JSX.Element;\n};\n\nexport default function InputColumn({ prompt, control }: InputColumnProps) {\n  return (\n    <div className=\"row\">\n      <div className=\"col-xs-4 col-lg-3\">{prompt}</div>\n      <div className=\"col-xs-7 col-lg-9\">{control}</div>\n    </div>\n  );\n}\n","import React, { ChangeEvent } from \"react\";\nimport { appActions, AppAction } from \"../appstate/appState\";\nimport InputColumn from \"./layout/InputColumn\";\n\ntype ExplainerInputProps = {\n  equation: string;\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst EquationInput = ({ equation, dispatch }: ExplainerInputProps) => {\n  const onEquationChange = (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(appActions.updateEquation(e.target.value));\n  };\n\n  return (\n    <InputColumn\n      prompt=\"Equation:\"\n      control={<input type=\"text\" onChange={onEquationChange} value={equation} />}\n    />\n  );\n};\n\nexport default React.memo(EquationInput);\n","import { Contraction } from \"../types/einsum_typeguards\";\n\nfunction makeLatexString(contraction: Contraction): string {\n  // Out_{i,k}=\\sum_j A_{i,j} B_{j,k}\n  const outputMatrix = `Out_{${contraction.output_indices.join(\",\")}}`;\n  const summationSymbols = contraction.summation_indices.map(idx => `\\\\sum_${idx}`).join(\" \");\n  function makeInputMatrix(indices: string[], n: number) {\n    const asciiA: number = \"A\".charCodeAt(0);\n    const matrixName = String.fromCharCode(asciiA + n);\n    const subscripts = indices.join(\",\");\n\n    return `${matrixName}_{${subscripts}}`;\n  }\n  const inputMatrices = contraction.operand_indices.map(makeInputMatrix).join(\" \");\n\n  return `${outputMatrix} = ${summationSymbols} ${inputMatrices}`;\n}\n\nexport default makeLatexString;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { Result, isErrorMessage } from \"../../types/einsum_typeguards\";\n\ntype OutputColumnProps = {\n  output: Result<JSX.Element>;\n};\n\nexport default function OutputColumn({ output }: OutputColumnProps) {\n  return (\n    <div className=\"row\">\n      <div className=\"col-xs-2 col-xs-offset-2 col-md-offset-0 col-md-1\">\n        {isErrorMessage(output) ? (\n          <FontAwesomeIcon\n            title=\"Something went wrong!\"\n            icon={faTimesCircle}\n            size=\"2x\"\n            color=\"orangered\"\n          />\n        ) : (\n          <FontAwesomeIcon\n            title=\"Everything is cool!\"\n            icon={faCheckCircle}\n            size=\"2x\"\n            color=\"darkgreen\"\n          />\n        )}\n      </div>\n      <div className=\"col-xs-8 col-md-11\">\n        {isErrorMessage(output) ? output.Err : output.Ok}\n      </div>\n    </div>\n  );\n}\n","import { renderToString } from \"katex\";\nimport \"katex/dist/katex.min.css\";\nimport React from \"react\";\nimport { isErrorMessage, isContraction } from \"../types/einsum_typeguards\";\nimport makeLatexString from \"../utils/makeLatexString\";\nimport parseAndTypecheckJSON from \"../utils/parseAndTypecheckJSON\";\nimport OutputColumn from \"./layout/OutputColumn\";\n\ntype EquationOutputProps = {\n  explanationJSON: string;\n};\n\nconst EquationOutput = (props: EquationOutputProps) => {\n  const { explanationJSON } = props;\n  const explanation = parseAndTypecheckJSON(explanationJSON, isContraction, \"validateAsJson\");\n  const output = isErrorMessage(explanation)\n    ? explanation\n    : {\n        Ok: (\n          <div\n            dangerouslySetInnerHTML={{\n              __html: renderToString(makeLatexString(explanation.Ok))\n            }}\n          />\n        )\n      };\n\n  return <OutputColumn output={output} />;\n};\n\nexport default React.memo(EquationOutput);\n","import React from \"react\";\n\ntype InputOutputProps = {\n  input: JSX.Element;\n  output: JSX.Element;\n};\n\nexport default function InputOutputRow({ input, output }: InputOutputProps) {\n  return (\n    <div className=\"row\" style={{ paddingTop: \"1em\", paddingBottom: \"1em\" }}>\n      <div className=\"col-xs-12 col-md-6\">{input}</div>\n      <div className=\"col-xs-12 col-md-6\">{output}</div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { AppAction } from \"../appstate/appState\";\nimport EquationInput from \"./EquationInput\";\nimport { validateAsJson } from \"../pkg/einsum_wasm\";\nimport EquationOutput from \"./EquationOutput\";\nimport InputOutputRow from \"./layout/InputOutputRow\";\n\ntype EquationProps = {\n  equation: string;\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst Equation = ({ equation, dispatch }: EquationProps) => {\n  const equationJSON = validateAsJson(equation);\n  return (\n    <InputOutputRow\n      input={<EquationInput equation={equation} dispatch={dispatch} />}\n      output={<EquationOutput explanationJSON={equationJSON} />}\n    />\n  );\n};\n\nexport default React.memo(Equation);\n","import React from \"react\";\nimport {\n  isErrorMessage,\n  isSizedContraction,\n  isContraction,\n  Result\n} from \"../types/einsum_typeguards\";\nimport parseAndTypecheckJSON from \"../utils/parseAndTypecheckJSON\";\nimport OutputColumn from \"./layout/OutputColumn\";\n\ntype AxisLengthOutputProps = {\n  equationJSON: string;\n  sizedExplanationJSON: string;\n};\n\nconst AxisLengthsOutput = ({ equationJSON, sizedExplanationJSON }: AxisLengthOutputProps) => {\n  let output: Result<JSX.Element>;\n\n  const explanation = parseAndTypecheckJSON(equationJSON, isContraction, \"validateAsJson\");\n\n  const sizedExplanation = parseAndTypecheckJSON(\n    sizedExplanationJSON,\n    isSizedContraction,\n    \"validateAndSizeFromShapesAsStringAsJson\"\n  );\n\n  if (isErrorMessage(sizedExplanation)) {\n    output = sizedExplanation;\n  } else if (isErrorMessage(explanation)) {\n    output = explanation;\n  } else {\n    // export type Contraction = {\n    //   operand_indices: string[];\n    //   output_indices: string[];\n    //   summation_indices: string[];\n    // };\n    const contraction = explanation.Ok;\n\n    // export type SizedContraction = {\n    //   contraction: Contraction;\n    //   output_size: OutputSize;\n    // };\n    // export type OutputSize = { [key: string]: number };\n    const outputMap = sizedExplanation.Ok.output_size;\n\n    output = {\n      Ok: (\n        <div>\n          <div>\n            Output size: [{contraction.output_indices.join(\", \")}] ={\" \"}\n            {JSON.stringify(contraction.output_indices.map(x => outputMap[x]))}\n          </div>\n          <div>\n            Summation index lengths:{\" \"}\n            {contraction.summation_indices.map(x => `${x}: ${outputMap[x]}`).join(\"; \")}\n          </div>\n        </div>\n      )\n    };\n  }\n\n  return <OutputColumn output={output} />;\n};\n\nexport default React.memo(AxisLengthsOutput);\n","import React, { ChangeEvent } from \"react\";\nimport { appActions, AppAction } from \"../appstate/appState\";\nimport InputColumn from \"./layout/InputColumn\";\n\ntype ShapesInputProps = {\n  visibleSizes: number;\n  operandShapes: string[];\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst ShapesInput = ({ operandShapes, visibleSizes, dispatch }: ShapesInputProps) => {\n  const shapes: string[] = [];\n  for (let i = 0; i < visibleSizes; i++) {\n    shapes.push(i < operandShapes.length ? operandShapes[i] : \"[]\");\n  }\n\n  const makeOnShapeChange = (index: number) => (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(appActions.updateShape(index, e.target.value));\n  };\n\n  return (\n    <>\n      {shapes.map((data, index) => (\n        <InputColumn\n          key={index}\n          prompt={`Shape of ${String.fromCharCode(index + \"A\".charCodeAt(0))}:`}\n          control={<input type=\"text\" onChange={makeOnShapeChange(index)} value={data} />}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default React.memo(ShapesInput);\n","import React from \"react\";\nimport { AppAction } from \"../appstate/appState\";\nimport { validateAndSizeFromShapesAsStringAsJson, validateAsJson } from \"../pkg/einsum_wasm\";\nimport AxisLengthsOutput from \"./AxisLengthsOutput\";\nimport { parseShapeString } from \"../utils/parseShapeStrings\";\nimport ShapesInput from \"./ShapesInput\";\nimport { isErrorMessage, ErrorMessage } from \"../types/einsum_typeguards\";\nimport InputOutputRow from \"./layout/InputOutputRow\";\n\ntype ShapesProps = {\n  equation: string;\n  visibleSizes: number;\n  operandShapes: string[];\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst Shapes = ({ equation, visibleSizes, operandShapes, dispatch }: ShapesProps) => {\n  const equationJSON = validateAsJson(equation);\n  const shapes = operandShapes.slice(0, visibleSizes);\n  const shapeArrays = shapes.map(parseShapeString);\n  let sizedExplanationJSON;\n  if (shapeArrays.some(isErrorMessage)) {\n    sizedExplanationJSON = JSON.stringify({\n      Err: JSON.stringify(\n        shapeArrays\n          .map((val, idx) => ({ val, idx }))\n          .filter(({ val }) => isErrorMessage(val))\n          .map(({ val, idx }) => ({ Tensor: idx, Error: (val as ErrorMessage).Err }))\n      )\n    });\n  } else {\n    sizedExplanationJSON = validateAndSizeFromShapesAsStringAsJson(\n      equation,\n      JSON.stringify(shapeArrays.map(x => (x as { Ok: number[] }).Ok))\n    );\n  }\n\n  return (\n    <InputOutputRow\n      input={\n        <ShapesInput\n          dispatch={dispatch}\n          visibleSizes={visibleSizes}\n          operandShapes={operandShapes}\n        />\n      }\n      output={\n        <AxisLengthsOutput\n          sizedExplanationJSON={sizedExplanationJSON}\n          equationJSON={equationJSON}\n        />\n      }\n    />\n  );\n};\n\nexport default React.memo(Shapes);\n","import React from \"react\";\nimport { isErrorMessage, isFlattenedOperand } from \"../types/einsum_typeguards\";\nimport parseOutput from \"../utils/parseOutputString\";\nimport parseAndTypecheckJSON from \"../utils/parseAndTypecheckJSON\";\nimport OutputColumn from \"./layout/OutputColumn\";\n\ntype ComputationOutputProps = {\n  einsumPathJSON: string;\n  computationOutputJSON: string;\n};\n\nconst ComputationOutput = (props: ComputationOutputProps) => {\n  const { computationOutputJSON, einsumPathJSON } = props;\n  const computationOutput = parseAndTypecheckJSON(\n    computationOutputJSON,\n    isFlattenedOperand,\n    \"slowEinsumAsJson\"\n  );\n  const output = isErrorMessage(computationOutput)\n    ? computationOutput\n    : {\n        Ok: (\n          <>\n            Einsum Result:{\" \"}\n            <div>{JSON.stringify(parseOutput(computationOutput.Ok), null, 2)}</div>\n            <div>Einsum Path: {einsumPathJSON}</div>\n          </>\n        )\n      };\n\n  return <OutputColumn output={output} />;\n};\n\nexport default React.memo(ComputationOutput);\n","import React, { ChangeEvent } from \"react\";\nimport { appActions, AppAction } from \"../appstate/appState\";\nimport InputColumn from \"./layout/InputColumn\";\n\ntype ContentsInputProps = {\n  visibleSizes: number;\n  operandContents: string[];\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst ContentsInput = ({ operandContents, visibleSizes, dispatch }: ContentsInputProps) => {\n  const contents: string[] = [];\n  for (let i = 0; i < visibleSizes; i++) {\n    contents.push(i < operandContents.length ? operandContents[i] : \"[]\");\n  }\n\n  const makeOnContentsChange = (index: number) => (e: ChangeEvent<HTMLInputElement>) => {\n    dispatch(appActions.updateContents(index, e.target.value));\n  };\n\n  return (\n    <>\n      {contents.map((data, index) => (\n        <InputColumn\n          key={index}\n          prompt={`Contents of ${String.fromCharCode(index + \"A\".charCodeAt(0))}:`}\n          control={<input type=\"text\" onChange={makeOnContentsChange(index)} value={data} />}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default React.memo(ContentsInput);\n","import React from \"react\";\nimport { AppAction } from \"../appstate/appState\";\nimport { slowEinsumAsJson, einsumPathAsJson } from \"../pkg/einsum_wasm\";\nimport ComputationOutput from \"./ComputationOutput\";\nimport { parseShapeString } from \"../utils/parseShapeStrings\";\nimport ContentsInput from \"./ContentsInput\";\nimport { isErrorMessage } from \"../types/einsum_typeguards\";\nimport { parseDataString } from \"../utils/parseDataString\";\nimport InputOutputRow from \"./layout/InputOutputRow\";\n\ntype ComputationProps = {\n  equation: string;\n  visibleSizes: number;\n  operandShapes: string[];\n  operandContents: string[];\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst Computation = ({\n  equation,\n  visibleSizes,\n  operandShapes,\n  operandContents,\n  dispatch\n}: ComputationProps) => {\n  const shapes = operandShapes.slice(0, visibleSizes);\n  const contents = operandContents.slice(0, visibleSizes);\n  const operands = [];\n  for (let i = 0; i < Math.min(shapes.length, contents.length); i++) {\n    const shape = parseShapeString(shapes[i]);\n    const data = parseDataString(contents[i]);\n\n    if (!isErrorMessage(shape) && !isErrorMessage(data) && typeof data.Ok !== \"number\") {\n      operands.push({\n        shape: shape.Ok,\n        contents: data.Ok.flat(2 ** 16)\n      });\n    } else {\n      operands.push({\n        Err: `Array ${i} doesn't work`\n      });\n    }\n  }\n\n  const operandsJSON = JSON.stringify(operands);\n  const einsumPathJSON = einsumPathAsJson(equation, operandsJSON);\n  const computationOutputJSON = slowEinsumAsJson(equation, operandsJSON);\n\n  return (\n    <InputOutputRow\n      input={\n        <ContentsInput\n          dispatch={dispatch}\n          visibleSizes={visibleSizes}\n          operandContents={operandContents}\n        />\n      }\n      output={\n        <ComputationOutput\n          computationOutputJSON={computationOutputJSON}\n          einsumPathJSON={einsumPathJSON}\n        />\n      }\n    />\n  );\n};\n\nexport default React.memo(Computation);\n","import React, { ChangeEvent, useState } from \"react\";\nimport { appActions, AppAction } from \"../appstate/appState\";\nimport InputColumn from \"./layout/InputColumn\";\nimport InputOutputRow from \"./layout/InputOutputRow\";\nimport presets from \"../appstate/presets\";\n\ntype PresetsProps = {\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst Presets = ({ dispatch }: PresetsProps) => {\n  const presetChoices = Object.entries(presets);\n  const [selectedPreset, setSelectedPreset] = useState(presetChoices[0][0]);\n  const onPresetSelect = (e: ChangeEvent<HTMLSelectElement>) => {\n    setSelectedPreset(e.target.value);\n    dispatch(appActions.loadPreset(e.target.value));\n  };\n\n  return (\n    <InputOutputRow\n      input={\n        <InputColumn\n          prompt=\"Try one:\"\n          control={\n            <select value={selectedPreset} onChange={onPresetSelect}>\n              {presetChoices.map(([name, preset]) => (\n                <option key={name} value={name}>\n                  {preset.description}\n                </option>\n              ))}\n            </select>\n          }\n        />\n      }\n      output={<></>}\n    />\n  );\n};\n\nexport default React.memo(Presets);\n","import React from \"react\";\nimport { AppState, AppAction } from \"../appstate/appState\";\nimport Equation from \"./Equation\";\nimport Shapes from \"./Shapes\";\nimport Computation from \"./Computation\";\nimport Presets from \"./Presets\";\n\ntype EinsumExplainerProps = {\n  appState: AppState;\n  dispatch: React.Dispatch<AppAction>;\n};\n\nconst EinsumExplainer = ({ appState, dispatch }: EinsumExplainerProps) => {\n  const { equation, visibleSizes, operandStates } = appState;\n\n  return (\n    <div className=\"wrap container-fluid\">\n      <Presets dispatch={dispatch} />\n      <Equation equation={equation} dispatch={dispatch} />\n      <Shapes\n        equation={equation}\n        dispatch={dispatch}\n        visibleSizes={visibleSizes}\n        operandShapes={operandStates.map(x => x.shapeStr)}\n      />\n      <Computation\n        equation={equation}\n        dispatch={dispatch}\n        visibleSizes={visibleSizes}\n        operandContents={operandStates.map(x => x.contentsStr)}\n        operandShapes={operandStates.map(x => x.shapeStr)}\n      />\n    </div>\n  );\n};\n\nexport default EinsumExplainer;\n","import React, { useReducer, useState } from \"react\";\nimport { reducer, initialState } from \"../appstate/appState\";\nimport EinsumExplainer from \"./EinsumExplainer\";\n\nimport \"./App.css\";\nimport \"flexboxgrid\";\n\nconst App = () => {\n  const [appState, dispatch] = useReducer(reducer, initialState);\n  const [, setReloadTime] = useState(Date.now());\n\n  if (module.hot) {\n    module.hot.accept(\"./EinsumExplainer\", () => {\n      setReloadTime(Date.now());\n    });\n  }\n\n  return <EinsumExplainer appState={appState} dispatch={dispatch} />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./utils/serviceWorker\";\nimport init from \"./pkg/einsum_wasm.js\";\n\n(async function run() {\n  await init(\"./pkg/einsum_wasm_bg.wasm\");\n  ReactDOM.render(<App />, document.getElementById(\"root\"));\n})();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}